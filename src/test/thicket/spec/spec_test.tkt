/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015-2016 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */

module Test.Spec

import Data

import System.Console
import System.Runtime

import Spec.Core
import Spec.Logger.Console

def specAssertions : TestLogger -> TestContext = l -> {
    description l "Specification assertions"
        it "expect true toBe true == true" {
            expect true toBe true == true
        }
        it "expect true not toBe true == false" {
            expect true not toBe true == false
        }
        it "expect true toBe false == false" {
            expect true toBe false == false
        }
        it "expect true not toBe false == true" {
            expect true not toBe false == true
        }
        it "expect 1 toBeIn (List[1]) == true" {
            expect 1 toBeIn (List[1]) == true
        }
        it "expect 1 not toBeIn (List[1]) == false" {
            expect 1 not toBeIn (List[1]) == false
        }
        it "expect 1 toBeIn (List[0]) == false" {
            expect 1 toBeIn (List[0]) == false
        }
        it "expect 1 not toBeIn (List[0]) == true" {
            expect 1 not toBeIn (List[0]) == true
        }
        it "expect 1 toBeAKey (Hashmap[0=>1]) == false" {
            expect 1 toBeAKey (Hashmap[0=>1]) == false
        }
        it "expect 1 not toBeAKey (Hashmap[0=>1]) == true" {
            expect 1 not toBeAKey (Hashmap[0=>1]) == true
        }
        it "expect 1 toBeAKey (Hashmap[1=>0]) == true" {
            expect 1 toBeAKey (Hashmap[1=>0]) == true
        }
        it "expect 1 not toBeAKey (Hashmap[1=>0]) == false" {
            expect 1 not toBeAKey (Hashmap[1=>0]) == false
        }
        it "expect 1 toBeAValue (Hashmap[1=>0]) == false" {
            expect 1 toBeAValue (Hashmap[1=>0]) == false
        }
        it "expect 1 not toBeAValue (Hashmap[1=>0]) == true" {
            expect 1 not toBeAValue (Hashmap[1=>0]) == true
        }
        it "expect 1 toBeAValue (Hashmap[0=>1]) == true" {
            expect 1 toBeAValue (Hashmap[0=>1]) == true
        }
        it "expect 1 not toBeAValue (Hashmap[0=>1]) == false" {
            expect 1 not toBeAValue (Hashmap[0=>1]) == false
        }
    done 
}

def contextAssertions : TestLogger -> TestContext = l -> {
    description l "Specification assertions"
        it "expect (semething) being true produces one success" {
            description dumbLogger "Specification assertions"
                it "produces true" {
                    true
                }
            done success == 1
        }
        it "expect (something) being false produces one failure" {
            description dumbLogger "Specification assertions"
                it "produces false" {
                    false
                }
            done failure == 1
        }
        it "expect (something) being false produces one failure and continue" {
            description dumbLogger "Specification assertions"
                it "produces false" {
                    false
                }
                it "produces true" {
                    true
                }
            done success == 1
        }
    done 
}

def testSuite : TestLogger -> unit = logger -> {
    do {
      List[
        specAssertions;
        contextAssertions
      ] each $ r -> r logger
    } return ()
}

testSuite consoleLogger